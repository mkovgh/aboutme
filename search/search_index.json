{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Contacts","text":"<p>Headhunter Resume</p> <p>Telegram</p>"},{"location":"goals/","title":"Goals","text":"<ul> <li>Self-development and self-improvement.</li> <li>Implement interesting ideas.</li> <li>Working with smart people.</li> <li>Hybrid or remote work.</li> <li>Salary as not the main goal, but the result of the work done.</li> </ul>"},{"location":"Examples/ansible/","title":"Ansible","text":"<p>Various ansible playbooks from personal experience, divided into categories.</p>"},{"location":"Examples/ansible/#oc","title":"OC","text":"Install docker k8s helm on Debian based system  Set Hostname Master Node   <pre><code>hostnamectl set-hostname k8s-master\n</code></pre>  Set Hostname Worker Node   <pre><code>hostnamectl set-hostname k8s-worker\n</code></pre>  Ansible Playbook    <pre><code>- hosts: k8s-cluster\n  tasks:\n  - name: Configure Modules and Sysctl for Containerd\n      shell: |\n      cat &lt;&lt;EOF &gt; /etc/modules-load.d/containerd.conf\n      overlay\n      br_netfilter\n      EOF\n      modprobe overlay\n      modprobe br_netfilter\n      cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf\n      net.bridge.bridge-nf-call-ip6tables = 1\n      net.bridge.bridge-nf-call-iptables = 1\n      net.ipv4.ip_forward = 1\n      EOF\n      sysctl --system\n  - name: Docker Install Depends\n      apt: name=ca-certificates,gpg update_cache=true\n  - name: Add Docker GPG apt Key\n      apt_key: url=https://download.docker.com/linux/debian/gpg\n  - name: Add Docker Repository\n      apt_repository: repo=\"deb https://download.docker.com/linux/debian bullseye stable\"\n  - name: Update APT and Install docker-ce\n      apt: name=docker-ce update_cache=true\n  - name: Enable service Docker\n      service: name=docker enabled=yes\n  - name: Restarted service Docker\n      service: name=docker state=restarted\n  - name: Generate Containerd Configurations\n      shell: containerd config default | tee /etc/containerd/config.toml\n  - name: Containerd Configurations chnage SystemdCgroup\n      shell: sed -i 's/SystemdCgroup \\= false/SystemdCgroup \\= true/g' /etc/containerd/config.toml\n  - name: Add K8S GPG apt Key\n      apt_key: url=https://packages.cloud.google.com/apt/doc/apt-key.gpg\n  - name: Add K8S Repository\n      apt_repository: repo=\"deb https://apt.kubernetes.io/ kubernetes-xenial main\"\n  - name: Update APT and Install K8S\n      apt: name=kubeadm,kubectl update_cache=true\n  #  - name: K8S DPKG Hold Packages\n  #    dpkg_selections: name=kubeadm,kubectl selection=hold\n  - name: Export K8S Configurations\n      shell: echo \"export KUBECONFIG=/etc/kubernetes/admin.conf\" &gt; /etc/environment\n  - name: Enable service containerd\n      service: name=containerd enabled=yes\n  - name: Restarted service containerd\n      service: name=containerd state=restarted\n  - name: Configure Modules and Sysctl for Containerd\n      shell: |\n      cat &lt;&lt;EOF &gt; /etc/hosts\n      127.0.0.1       localhost\n      ::1     localhost ip6-localhost ip6-loopback\n      ff02::1 ip6-allnodes\n      ff02::2 ip6-allrouters\n      172.31.50.40    k8s-master\n      172.31.50.41    k8s-worker\n      EOF\n  - name: Add Helm GPG apt Key\n      apt_key: url=https://baltocdn.com/helm/signing.asc\n  - name: Add Helm Repository\n      apt_repository: repo=\"deb https://baltocdn.com/helm/stable/debian/ all main\"\n  - name: Update APT and Install Helm\n      apt: name=kubeadm,kubectl update_cache=true\n</code></pre>   After installation operation shell commands   <pre><code>kubeadm init --pod-network-cidr=10.244.0.0/16\nexport KUBECONFIG=/etc/kubernetes/admin.conf \nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n</code></pre>"},{"location":"Examples/ansible/#network-devices","title":"Network Devices","text":"TP-Link  TP-Link (Version Required 4.X)   <pre><code># Compatibility with all firmware is not guaranteed\n\n# Select hosts, hostname, port_numbers,\n# port_range_uplink, vlans_list optional: roles and other vars\n\n- hosts: &lt;hosts name&gt;\n  roles:\n  connection: network_cli\n  vars:\n  - hostname: &lt;hostname&gt;\n  - port_numbers: &lt;port active number&gt;\n  - portmode: port-based #type loopback\n  - port_range_uplink: &lt;main upLink&gt;\n  - vlans_list: &lt;vlans example: 1,2,3&gt;\n  - ntp_server: &lt;select ip or name server&gt;\n  - syslog_server: &lt;select ip or name server&gt;\n  tasks:\n  - name: Set HostName \n      ios_command:\n      commands:\n      - enable\n      - configure\n      - hostname \"{{hostname}}\"\n  - name: Set loopback-detection, ntp-server, rsyslog-server, snmp-server\n      ios_command:\n      commands:\n      - enable\n      - configure\n      - loopback-detection\n      - loopback-detection interval 5\n      - loopback-detection recovery-time 60\n      - interface range gigabitEthernet 1/0/1-{{port_numbers}}\n      - loopback-detection\n      - loopback-detection config process-mode {{portmode}} recovery-mode auto\n      - system-time ntp UTC+03:00 {{ntp_server}} {{ntp_server}} 24\n      - logging host index 1 {{syslog_server}} 6\n      - snmp-server\n      - snmp-server community public read-only viewDefault\n  - name: Set VLANS on UpLink's\n      ios_command:\n      commands:\n      - enable\n      - configure\n      - interface range gigabitEthernet 1/0/{{port_range_uplink}}\n</code></pre>"},{"location":"Examples/docker/","title":"Docker","text":""},{"location":"Examples/docker/#environment","title":"Environment","text":"<ul> <li><code>BOT_API</code> = Use the API key obtained from BotFather.</li> <li><code>ALLOW_ID</code> = List of allowed telegrams ID users (example ID|ID2).</li> </ul> <p>The /data directory is intended for the location of scripts there.</p> Source code file: main.sh <pre><code>#!/bin/bash\n\nSTAT_FILE_MD5=/tmp/tg_stat_md5\nSTAT_FILE=/tmp/tg_stat\n\n# Get Status\ncurl -s https://api.telegram.org/bot$BOT_API/getUpdates\\?offset\\=-1 &gt; $STAT_FILE\n\n# Checking for repeated commands\nif [ \"$(cat $STAT_FILE | jq -r '.result | .[] | .update_id' | md5sum)\" = \"$(test -f $STAT_FILE_MD5 &amp;&amp; cat $STAT_FILE_MD5)\" ]; then\n exit\nfi\n\n# Remember team message id in history\ncat $STAT_FILE | jq -r '.result | .[] | .update_id' | md5sum &gt; $STAT_FILE_MD5\n\n# Check NULL and allow ID from environment\nif [ \"$ALLOW_ID\" = \"\" ]; then\n exit\n# curl -s -X POST https://api.telegram.org/bot$BOT_API/sendMessage -d chat_id=\"$(cat $STAT_FILE | jq -r '.result | .[] | .message | .chat | .id')\" -d text=\"Sorry, not allowed.\"\nelse\n cat $STAT_FILE | grep -P \"$ALLOW_ID\" || exit\nfi\n\n# Checking the completion status of an operation\nfunction check {\nif [ $? = 0 ]; then\n curl -s -X POST https://api.telegram.org/bot$BOT_API/sendMessage -d chat_id=\"$(cat $STAT_FILE | jq -r '.result | .[] | .message | .chat | .id')\" -d text=\"Operation completed successfully \u2705\"\nelse\n curl -s -X POST https://api.telegram.org/bot$BOT_API/sendMessage -d chat_id=\"$(cat $STAT_FILE | jq -r '.result | .[] | .message | .chat | .id')\" -d text=\"Operation completed unsuccessfully \u274c\"\nfi\n}\n\n# Command operator\nif [ -f /data/$(cat $STAT_FILE | jq -r '.result | .[] | .message | .text') ]; then\n /data/$(cat $STAT_FILE | jq -r '.result | .[] | .message | .text'); check\nelse\n curl -s -X POST https://api.telegram.org/bot$BOT_API/sendMessage -d chat_id=\"$(cat $STAT_FILE | jq -r '.result | .[] | .message | .chat | .id')\" -d text=\"Sorry, script not found \u267b\"\nfi\n</code></pre>"},{"location":"Examples/docker/#run-docker-container","title":"Run Docker Container","text":"<pre><code>  docker run -d --name shell-tg-bot \\\n  -e BOT_API= \\\n  -e ALLOW_ID= \\\n  -v shell-tg-bot_data:/data\n  --restart unless-stopped \\\n  mkovdk/shell-tg-bot\n</code></pre>"},{"location":"Examples/real%20life/","title":"Real life","text":""},{"location":"Examples/real%20life/#one-of-the-outsourced-projects","title":"One of the outsourced projects","text":"<pre><code>Docker Node, Grafana dashboards, Cadvisor performance analyzes\n</code></pre>"},{"location":"Examples/real%20life/#wifi-network-based-on-unifi","title":"WiFi network based on Unifi","text":"<pre><code>- A small project with 50 wifi points, with an average number of users of 450-550 devices\n- Monitoring: Grafana, Prometheus\n</code></pre>"},{"location":"Examples/real%20life/#built-server-infrastructure-from-scratch","title":"Built server infrastructure from scratch","text":"<pre><code>- Hypervisors, 20 Virtual machines, Fibre channel storage, Equipment MikroTik\n- HP, TP-Link, Cisco, Uninterruptible power supply, optical lines\n- 10Gb network, Fibre channel storage\n</code></pre>"},{"location":"Examples/real%20life/#zabbix-monitoring-server","title":"Zabbix Monitoring Server","text":"<pre><code>- Experience in monitoring over 300 hosts \n- Over 5000+ metrics\n- Discovery, SNMP, Ping, IPMI, Agents, API\n</code></pre>"},{"location":"Examples/shell%20scripts/","title":"Shell scripts","text":"Prometheus install and create systemd services  Create prometheus.sh file make the script executable (chmod +x)   <pre><code>#!/bin/bash\n\nUSER_NAME=prometheus\nSERVICE_CONF=/etc/prometheus/prometheus.yml\nSERVICE_BIN=/usr/local/bin\n\nwhich curl &gt;/dev/null || apt install -y curl\nwhich wget &gt;/dev/null || apt install -y wget\n\ncreating () {\n curl -s https://api.github.com/repos/prometheus/\"$SERVICE_NAME\"/releases/latest | grep browser_download_url | grep linux-amd64 | cut -d '\"' -f 4 | wget -qi -\n tar xvf \"$SERVICE_NAME\"*.tar.gz\n rm \"$SERVICE_NAME\"*.tar.gz \"$SERVICE_NAME\"-*/{LICENSE,NOTICE}\n [ ! -d /etc/$SERVICE_NAME ] &amp;&amp; mkdir /etc/$SERVICE_NAME\n mv \"$SERVICE_NAME\"-*/\"$SERVICE_NAME\" $SERVICE_BIN\n mv \"$SERVICE_NAME\"-*/* /etc/\"$SERVICE_NAME\"/\n rm -r \"$SERVICE_NAME\"-*\n}\n\nsystemd_service () {\n getent passwd $USER_NAME &gt;/dev/null || useradd -s /sbin/nologin prometheus\n tee /etc/systemd/system/\"$SERVICE_NAME\".service &lt;&lt;EOF\n[Unit]\nWants=network-online.target\nDescription=$SERVICE_NAME\nAfter=network-online.target\n[Service]\nType=simple\nUser=$USER_NAME\nGroup=$USER_NAME\nExecReload=/bin/kill -HUP $MAINPID\n$SYSTEMD_OPTION\nSyslogIdentifier=$SERVICE_NAME\nRestart=always\n[Install]\nWantedBy=multi-user.target\nEOF\n systemctl daemon-reload\n systemctl start $SERVICE_NAME\n systemctl enable $SERVICE_NAME\n}\n\nprometheus () {\n SERVICE_NAME=prometheus\n SYSTEMD_OPTION=\"ExecStart=/usr/local/bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/var/lib/prometheus --storage.tsdb.retention=30d --web.console.templates=/etc/rometheus/consoles --web.console.libraries=/etc/prometheus/console_libraries --web.listen-address=0.0.0.0:9090 --web.external-url= \"\n [ ! -d /var/lib/$SERVICE_NAME ] &amp;&amp; mkdir /var/lib/$SERVICE_NAME &amp;&amp; chown \"$USER_NAME\":\"$USER_NAME\" /var/lib/\"$SERVICE_NAME\"\n creating\n mv /etc/\"$SERVICE_NAME\"/promtool $SERVICE_BIN\n systemd_service\n}\n\nnode_exporter () {\n SERVICE_NAME=node_exporter\n SYSTEMD_OPTION=\"ExecStart=/usr/local/bin/node_exporter\"\n creating\n systemd_service\n tee -a $SERVICE_CONF &lt;&lt;EOF\n- job_name: '$SERVICE_NAME'\n   scrape_interval: 5s\n   static_configs:\n      - targets: ['localhost:9100']\nEOF\n systemctl restart prometheus.service\n}\n\nblackbox_exporter () {\n SERVICE_NAME=blackbox_exporter\n SYSTEMD_OPTION=\"ExecStart=/usr/local/bin/blackbox_exporter --config.file=\"/etc/\"$SERVICE_NAME\"/blackbox.yml\"\"\n creating\n systemd_service\n tee -a $SERVICE_CONF &lt;&lt;EOF\n- job_name: '$SERVICE_NAME'\n   metrics_path: /probe\n   params:\n      module: [http_2xx]\n   static_configs:\n      - targets:\n      - http://localhost:9090\n      - http://localhost:9100\n   relabel_configs:\n      - source_labels: [__address__]\n      target_label: __param_target\n      - source_labels: [__param_target]\n      target_label: instance\n      - target_label: __address__\n      replacement: localhost:9115\nEOF\n systemctl restart prometheus.service\n}\n\nsnmp_exporter () {\n SERVICE_NAME=snmp_exporter\n SYSTEMD_OPTION=\"ExecStart=/usr/local/bin/snmp_exporter --config.file=\"/etc/\"$SERVICE_NAME\"/snmp.yml\"\"\n creating\n systemd_service\n tee -a $SERVICE_CONF &lt;&lt;EOF\n- job_name: '$SERVICE_NAME'\n   static_configs:\n      - targets:\n      - localhost # SNMP device.\n   metrics_path: /snmp\n   params:\n      module: [if_mib]\n   relabel_configs:\n      - source_labels: [__address__]\n      target_label: __param_target\n      - source_labels: [__param_target]\n      target_label: instance\n      - target_label: __address__\n      replacement: localhost:9116  # The SNMP exporter's real hostname:port.\nEOF\n systemctl restart prometheus.service\n}\n\nprometheus\nnode_exporter\nblackbox_exporter\nsnmp_exporter                                                                                                                                                                                          \n</code></pre>"},{"location":"Examples/terraform/","title":"Terraform","text":""},{"location":"Examples/terraform/#vmware-create-vm","title":"VMware Create VM","text":"<p>Introductory:</p> <pre><code>- 2 hypervisors esxi and vsphere\n- 1 datastore\n- 4 ethernet ports\n- 2 vlan 100 and 101\n</code></pre> <p>Create a vm with the following characteristics:</p> <pre><code>- 2 cores\n- 1gb ram size\n- 10gb disk size\n- 2 network interfaces with 2 vlan 100 and 101\n- VM must be on 2 hypervisors\n</code></pre> mail.tf <pre><code>provider \"vsphere\" {\n  user                 = \"username@hostname\"\n  password             = \"password\"\n  vsphere_server       = \"ip adddress or domain name\"\n  allow_unverified_ssl = true\n}\n\nvariable \"datacenter\" {\n  default = \"datacenter\" # datacenter name\n}\n\nvariable \"hosts\" {\n  type    = list(string)\n  default = [\n    \"10.10.10.1\", # hypervisors 1\n    \"10.10.10.2\"  # hypervisors 2\n  ]\n}\n\ndata \"vsphere_datacenter\" \"datacenter\" {\n  name = \"${var.datacenter}\"\n}\n\ndata \"vsphere_host\" \"hosts\" {\n  count         = \"${length(var.hosts)}\"\n  name          = \"${var.hosts[count.index]}\"\n  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"\n}\n\ndata \"vsphere_datastore\" \"datastore\" {\n  name          = \"datastore\"\n  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"\n}\n\nresource \"vsphere_compute_cluster\" \"cluster\" {\n  name            = \"cluster\" # cluster name\n  datacenter_id   = data.vsphere_datacenter.datacenter.id\n  host_system_ids = \"${data.vsphere_host.hosts.*.id}\"\n}\n\ndata \"vsphere_compute_cluster\" \"cluster\" {\n  name          = \"cluster\" \n  datacenter_id = \"${data.vsphere_datacenter.datacenter.id}\"\n}\n\nvariable \"network_interfaces_list_ethernet_ports\" {\n  default = [\n    \"vmnic0\",\n    \"vmnic1\",\n    \"vmnic2\",\n    \"vmnic3\",\n  ]\n}\n\nresource \"vsphere_distributed_virtual_switch\" \"vds\" {\n  name                          = \"vds\"\n  datacenter_id             = data.vsphere_datacenter.datacenter.id\n\n  host {\n    host_system_id = data.vsphere_host.hosts.0.id\n    devices        = var.network_interfaces_list_ethernet_ports\n  }\n\n  host {\n    host_system_id = data.vsphere_host.hosts.1.id\n    devices        = var.network_interfaces_list_ethernet_ports\n  }\n\n  allow_promiscuous               = true # Indicates whether or not all traffic is seen on a given port\n  allow_mac_changes               = false # Controls whether or not the Media Access Control\n  allow_forged_transmits          = true # Allowed to send network traffic with a different MAC address than that of its own\n}\n\n# Create vlan 100\nresource \"vsphere_distributed_port_group\" \"vlan100\" {\n  name                            = \"vlan100\"\n  distributed_virtual_switch_uuid = vsphere_distributed_virtual_switch.vds.id\n\n  vlan_id = 100\n\n}\n\n# Create vlan 101\nresource \"vsphere_distributed_port_group\" \"vlan101\" {\n  name                            = \"vlan101\"\n  distributed_virtual_switch_uuid = vsphere_distributed_virtual_switch.vds.id\n\n  vlan_id = 101\n}\n\ndata \"vsphere_network\" \"vlan100\" {\n  name          = \"vlan100\"\n  datacenter_id = data.vsphere_datacenter.datacenter.id\n}\n\ndata \"vsphere_network\" \"vlan101 {\n  name          = \"vlan101\"\n  datacenter_id = data.vsphere_datacenter.datacenter.id\n}\n\n# Create VM\nresource \"vsphere_virtual_machine\" \"test\" {\n  name                 = \"test\" # vm name\n  resource_pool_id     = data.vsphere_compute_cluster.cluster.resource_pool_id\n  num_cores_per_socket = 2\n  num_cpus             = 2\n  memory               = 1024 # memory size\n  guest_id             = \"debian10_64Guest\"\n\n  host_system_id       = data.vsphere_host.hosts.1.id\n\n  disk {\n    label              = \"disk0\"\n    size               = 10\n    unit_number        = 0\n  }\n\n  network_interface {\n      adapter_type     = \"vmxnet3\"\n      network_id       = data.vsphere_network.vlan100.id\n  }\n\n  network_interface {\n      adapter_type     = \"vmxnet3\"\n      network_id       = data.vsphere_network.vlan101.id\n  }\n\n  lifecycle {\n   ignore_changes      = [\n     disk[0]\n   ]\n  }\n}\n</code></pre>"}]}