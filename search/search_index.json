{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"contacts/","title":"Contacts","text":"<p>Headhunter Resume</p> <p>Telegram</p>"},{"location":"goals/","title":"Goals","text":"<ul> <li>Self-development and self-improvement.</li> <li>Implement interesting ideas.</li> <li>Working with smart people.</li> <li>Hybrid or remote work.</li> <li>Salary as not the main goal, but the result of the work done.</li> </ul>"},{"location":"Examples/ansible/","title":"Ansible","text":"<p>Various ansible playbooks from personal experience, divided into categories.</p>"},{"location":"Examples/ansible/#oc","title":"OC","text":"Install docker k8s helm on Debian based system  Set Hostname Master Node   <pre><code>    hostnamectl set-hostname k8s-master\n</code></pre>  Set Hostname Worker Node   <pre><code>    hostnamectl set-hostname k8s-worker\n</code></pre>  Ansible Playbook    <pre><code>    - hosts: k8s-cluster\n    tasks:\n    - name: Configure Modules and Sysctl for Containerd\n        shell: |\n        cat &lt;&lt;EOF &gt; /etc/modules-load.d/containerd.conf\n        overlay\n        br_netfilter\n        EOF\n        modprobe overlay\n        modprobe br_netfilter\n        cat &lt;&lt;EOF &gt;  /etc/sysctl.d/k8s.conf\n        net.bridge.bridge-nf-call-ip6tables = 1\n        net.bridge.bridge-nf-call-iptables = 1\n        net.ipv4.ip_forward = 1\n        EOF\n        sysctl --system\n\n    - name: Docker Install Depends\n        apt: name=ca-certificates,gpg update_cache=true\n    - name: Add Docker GPG apt Key\n        apt_key: url=https://download.docker.com/linux/debian/gpg\n    - name: Add Docker Repository\n        apt_repository: repo=\"deb https://download.docker.com/linux/debian bullseye stable\"\n    - name: Update APT and Install docker-ce\n        apt: name=docker-ce update_cache=true\n\n    - name: Enable service Docker\n        service: name=docker enabled=yes\n    - name: Restarted service Docker\n        service: name=docker state=restarted\n\n    - name: APT Install Curl\n        apt: name=curl update_cache=true\n\n    - name: Generate Containerd Configurations\n        shell: containerd config default | tee /etc/containerd/config.toml\n    - name: Containerd Configurations chnage SystemdCgroup\n        shell: sed -i 's/SystemdCgroup \\= false/SystemdCgroup \\= true/g' /etc/containerd/config.toml\n\n    - name: Add K8S GPG apt Key\n        apt_key: url=https://packages.cloud.google.com/apt/doc/apt-key.gpg\n    - name: Add K8S Repository\n        apt_repository: repo=\"deb https://apt.kubernetes.io/ kubernetes-xenial main\"\n    - name: Update APT and Install K8S\n        apt: name=kubeadm,kubectl update_cache=true\n\n    #  - name: K8S DPKG Hold Packages\n    #    dpkg_selections: name=kubeadm,kubectl selection=hold\n\n    - name: Export K8S Configurations\n        shell: echo \"export KUBECONFIG=/etc/kubernetes/admin.conf\" &gt; /etc/environment\n\n    - name: Enable service containerd\n        service: name=containerd enabled=yes\n    - name: Restarted service containerd\n        service: name=containerd state=restarted\n\n    - name: Configure Modules and Sysctl for Containerd\n        shell: |\n        cat &lt;&lt;EOF &gt; /etc/hosts\n        127.0.0.1       localhost\n\n        ::1     localhost ip6-localhost ip6-loopback\n        ff02::1 ip6-allnodes\n        ff02::2 ip6-allrouters\n\n        172.31.50.40    k8s-master\n        172.31.50.41    k8s-worker\n        EOF\n\n    - name: Add Helm GPG apt Key\n        apt_key: url=https://baltocdn.com/helm/signing.asc\n    - name: Add Helm Repository\n        apt_repository: repo=\"deb https://baltocdn.com/helm/stable/debian/ all main\"\n    - name: Update APT and Install Helm\n        apt: name=kubeadm,kubectl update_cache=true\n</code></pre>   After installation operation shell commands   <pre><code>    kubeadm init --pod-network-cidr=10.244.0.0/16\n    export KUBECONFIG=/etc/kubernetes/admin.conf \n    kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n</code></pre>"},{"location":"Examples/ansible/#network-devices","title":"Network Devices","text":"TP-Link  TP-Link (Ver Required 4.X)   <pre><code>    # Compatibility with all firmware is not guaranteed\n\n    # Select hosts, hostname, port_numbers,\n    # port_range_uplink, vlans_list optional: roles and other vars\n\n    - hosts: &lt;hosts name&gt;\n    roles:\n    connection: network_cli\n    vars:\n    - hostname: &lt;hostname&gt;\n    - port_numbers: &lt;port active number&gt;\n    - portmode: port-based #type loopback\n    - port_range_uplink: &lt;main upLink&gt;\n    - vlans_list: &lt;vlans example: 1,2,3&gt;\n    - ntp_server: &lt;select ip or name server&gt;\n    - syslog_server: &lt;select ip or name server&gt;\n\n    tasks:\n\n    - name: Set HostName \n        ios_command:\n        commands:\n        - enable\n        - configure\n        - hostname \"{{hostname}}\"\n\n    - name: Set loopback-detection, ntp-server, rsyslog-server, snmp-server\n        ios_command:\n        commands:\n        - enable\n        - configure\n        - loopback-detection\n        - loopback-detection interval 5\n        - loopback-detection recovery-time 60\n        - interface range gigabitEthernet 1/0/1-{{port_numbers}}\n        - loopback-detection\n        - loopback-detection config process-mode {{portmode}} recovery-mode auto\n        - system-time ntp UTC+03:00 {{ntp_server}} {{ntp_server}} 24\n        - logging host index 1 {{syslog_server}} 6\n        - snmp-server\n        - snmp-server community public read-only viewDefault\n\n    - name: Set VLANS on UpLink's\n        ios_command:\n        commands:\n        - enable\n        - configure\n        - interface range gigabitEthernet 1/0/{{port_range_uplink}}\n</code></pre>"},{"location":"Examples/docker/","title":"Docker","text":""},{"location":"Examples/docker/#environment","title":"Environment","text":"<ul> <li><code>BOT_API</code> = Use the API key obtained from BotFather.</li> <li><code>ALLOW_ID</code> = List of allowed telegrams ID users (example ID|ID2).</li> </ul> <p>The /data directory is intended for the location of scripts there.</p> Source code file: main.sh <pre><code>   #!/bin/bash\n\n   STAT_FILE_MD5=/tmp/tg_stat_md5\n   STAT_FILE=/tmp/tg_stat\n\n   # Get Status\n   curl -s https://api.telegram.org/bot$BOT_API/getUpdates\\?offset\\=-1 &gt; $STAT_FILE\n\n   # Checking for repeated commands\n   if [ \"$(cat $STAT_FILE | jq -r '.result | .[] | .update_id' | md5sum)\" = \"$(test -f $STAT_FILE_MD5 &amp;&amp; cat $STAT_FILE_MD5)\" ]; then\n   exit\n   fi\n\n   # Remember team message id in history\n   cat $STAT_FILE | jq -r '.result | .[] | .update_id' | md5sum &gt; $STAT_FILE_MD5\n\n   # Check NULL and allow ID from environment\n   if [ \"$ALLOW_ID\" = \"\" ]; then\n   exit\n   # curl -s -X POST https://api.telegram.org/bot$BOT_API/sendMessage -d chat_id=\"$(cat $STAT_FILE | jq -r '.result | .[] | .message | .chat | .id')\" -d text=\"Sorry, not allowed.\"\n   else\n   cat $STAT_FILE | grep -P \"$ALLOW_ID\" || exit\n   fi\n\n   # Checking the completion status of an operation\n   function check {\n   if [ $? = 0 ]; then\n   curl -s -X POST https://api.telegram.org/bot$BOT_API/sendMessage -d chat_id=\"$(cat $STAT_FILE | jq -r '.result | .[] | .message | .chat | .id')\" -d text=\"Operation completed successfully \u2705\"\n   else\n   curl -s -X POST https://api.telegram.org/bot$BOT_API/sendMessage -d chat_id=\"$(cat $STAT_FILE | jq -r '.result | .[] | .message | .chat | .id')\" -d text=\"Operation completed unsuccessfully \u274c\"\n   fi\n   }\n\n   # Command operator\n   if [ -f /data/$(cat $STAT_FILE | jq -r '.result | .[] | .message | .text') ]; then\n   /data/$(cat $STAT_FILE | jq -r '.result | .[] | .message | .text'); check\n   else\n   curl -s -X POST https://api.telegram.org/bot$BOT_API/sendMessage -d chat_id=\"$(cat $STAT_FILE | jq -r '.result | .[] | .message | .chat | .id')\" -d text=\"Sorry, script not found \u267b\"\n   fi\n</code></pre>"},{"location":"Examples/docker/#run-docker-container","title":"Run Docker Container","text":"<pre><code>  docker run -d --name shell-tg-bot \\\n  -e BOT_API= \\\n  -e ALLOW_ID= \\\n  -v shell-tg-bot_data:/data\n  --restart unless-stopped \\\n  mkovdk/shell-tg-bot\n</code></pre>"},{"location":"Examples/real%20life/","title":"Real life","text":""},{"location":"Examples/real%20life/#one-of-the-outsourced-projects","title":"One of the outsourced projects","text":"<pre><code>Docker Node, Grafana dashboards, Cadvisor performance analyzes\n</code></pre>"},{"location":"Examples/real%20life/#built-server-infrastructure-from-scratch","title":"Built server infrastructure from scratch","text":"<pre><code>- Hypervisors, 20 Virtual machines, Fibre channel storage, Equipment MikroTik\n- HP, TP-Link, Uninterruptible power supply, optical lines\n- 10Gb network, Fibre channel storage\n</code></pre>"},{"location":"Examples/real%20life/#zabbix-monitoring-server","title":"Zabbix Monitoring Server","text":"<pre><code>- Experience in monitoring over 300 hosts \n- Over 5000+ metrics\n- Discovery, SNMP, Ping, IPMI, Agents, API\n</code></pre>"},{"location":"Examples/scripts/","title":"Scripts","text":"Prometheus install and create systemd services  Create prometheus.sh file make the script executable (chmod +x)   <pre><code>      #!/bin/bash\n\n      USER_NAME=prometheus\n      SERVICE_CONF=/etc/prometheus/prometheus.yml\n      SERVICE_BIN=/usr/local/bin\n\n      which curl &gt;/dev/null || apt install -y curl\n      which wget &gt;/dev/null || apt install -y wget\n\n      creating () {\n      curl -s https://api.github.com/repos/prometheus/\"$SERVICE_NAME\"/releases/latest | grep browser_download_url | grep linux-amd64 | cut -d '\"' -f 4 | wget -qi -\n      tar xvf \"$SERVICE_NAME\"*.tar.gz\n      rm \"$SERVICE_NAME\"*.tar.gz \"$SERVICE_NAME\"-*/{LICENSE,NOTICE}\n      [ ! -d /etc/$SERVICE_NAME ] &amp;&amp; mkdir /etc/$SERVICE_NAME\n      mv \"$SERVICE_NAME\"-*/\"$SERVICE_NAME\" $SERVICE_BIN\n      mv \"$SERVICE_NAME\"-*/* /etc/\"$SERVICE_NAME\"/\n      rm -r \"$SERVICE_NAME\"-*\n      }\n\n      systemd_service () {\n      getent passwd $USER_NAME &gt;/dev/null || useradd -s /sbin/nologin prometheus\n      tee /etc/systemd/system/\"$SERVICE_NAME\".service &lt;&lt;EOF\n      [Unit]\n      Wants=network-online.target\n      Description=$SERVICE_NAME\n      After=network-online.target\n\n      [Service]\n      Type=simple\n      User=$USER_NAME\n      Group=$USER_NAME\n      ExecReload=/bin/kill -HUP $MAINPID\n      $SYSTEMD_OPTION\n\n      SyslogIdentifier=$SERVICE_NAME\n      Restart=always\n\n      [Install]\n      WantedBy=multi-user.target\n      EOF\n      systemctl daemon-reload\n      systemctl start $SERVICE_NAME\n      systemctl enable $SERVICE_NAME\n      }\n\n      prometheus () {\n      SERVICE_NAME=prometheus\n      SYSTEMD_OPTION=\"ExecStart=/usr/local/bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/var/lib/prometheus --storage.tsdb.retention=30d --web.console.templates=/etc/prometheus/consoles --web.console.libraries=/etc/prometheus/console_libraries --web.listen-address=0.0.0.0:9090 --web.external-url= \"\n      [ ! -d /var/lib/$SERVICE_NAME ] &amp;&amp; mkdir /var/lib/$SERVICE_NAME &amp;&amp; chown \"$USER_NAME\":\"$USER_NAME\" /var/lib/\"$SERVICE_NAME\"\n      creating\n      mv /etc/\"$SERVICE_NAME\"/promtool $SERVICE_BIN\n      systemd_service\n      }\n\n      node_exporter () {\n      SERVICE_NAME=node_exporter\n      SYSTEMD_OPTION=\"ExecStart=/usr/local/bin/node_exporter\"\n      creating\n      systemd_service\n      tee -a $SERVICE_CONF &lt;&lt;EOF\n      - job_name: '$SERVICE_NAME'\n         scrape_interval: 5s\n         static_configs:\n            - targets: ['localhost:9100']\n      EOF\n      systemctl restart prometheus.service\n      }\n\n      blackbox_exporter () {\n      SERVICE_NAME=blackbox_exporter\n      SYSTEMD_OPTION=\"ExecStart=/usr/local/bin/blackbox_exporter --config.file=\"/etc/\"$SERVICE_NAME\"/blackbox.yml\"\"\n      creating\n      systemd_service\n      tee -a $SERVICE_CONF &lt;&lt;EOF\n      - job_name: '$SERVICE_NAME'\n         metrics_path: /probe\n         params:\n            module: [http_2xx]\n         static_configs:\n            - targets:\n            - http://localhost:9090\n            - http://localhost:9100\n         relabel_configs:\n            - source_labels: [__address__]\n            target_label: __param_target\n            - source_labels: [__param_target]\n            target_label: instance\n            - target_label: __address__\n            replacement: localhost:9115\n      EOF\n         systemctl restart prometheus.service\n      }\n\n      snmp_exporter () {\n      SERVICE_NAME=snmp_exporter\n      SYSTEMD_OPTION=\"ExecStart=/usr/local/bin/snmp_exporter --config.file=\"/etc/\"$SERVICE_NAME\"/snmp.yml\"\"\n      creating\n      systemd_service\n      tee -a $SERVICE_CONF &lt;&lt;EOF\n      - job_name: '$SERVICE_NAME'\n         static_configs:\n            - targets:\n            - localhost # SNMP device.\n         metrics_path: /snmp\n         params:\n            module: [if_mib]\n         relabel_configs:\n            - source_labels: [__address__]\n            target_label: __param_target\n            - source_labels: [__param_target]\n            target_label: instance\n            - target_label: __address__\n            replacement: localhost:9116  # The SNMP exporter's real hostname:port.\n      EOF\n      systemctl restart prometheus.service\n      }\n\n      prometheus\n      node_exporter\n      blackbox_exporter\n      snmp_exporter\n</code></pre>"}]}